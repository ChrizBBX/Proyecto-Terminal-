@model IEnumerable<Terminal.WebUI.Models.PreviaViewModelcs>

@{
    ViewData["Title"] = "VistaPrevia";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="~/examples/libs/jspdf.umd.js"></script>
<script src="~/examples/mitubachi-normal.js"></script>
<script src="~/examples/libs/faker.min.js"></script>
<script src="~/dist/jspdf.plugin.autotable.js"></script>

<h1>VistaPrevia</h1>


 

    <div class="card">
        <div class="card-body">
            <h1>Boletos</h1>
            <div class="row">
                <div class="col-lg-12">
                    <div class="float-e-margins">
                        <div class="ibox-title">
                            <div class="ibox-tools">
                                <div class="col-12">

                                    <div class="row">

                                        <div class="col-1"> </div>
                                        <div class="col-10" style="text-align:center">
                                            <div class="col-10" style="text-align:center"> <button type="button" id="btn_Exportar" class="btn btn-success"> Convertir en pdf </button> </div>
                                        </div>
                                        <div class="col-1"> </div>
                                    </div>

                                </div>
                            </div>
                        </div>
                        <br />
                        <iframe id="pdf-preview" width="700px" height="600px"></iframe>

                        <div class="table-responsive">
                            <table class="table text-nowrap table-striped table-hover dataTables-example" id="DataTable" hidden="hidden">
                                <thead class="bg-teal-400">
                                    <tr class="text-dark">
                                        <th class="text-dark">@Html.DisplayNameFor(model => model.bole_ID)</th>
                                        <th class="text-dark">@Html.DisplayNameFor(model => model.bole_clie_Nombre_Completo)</th>
                                        <th class="text-dark">@Html.DisplayNameFor(model => model.bole_hora_Origen_Nombre)</th>
                                        <th class="text-dark">@Html.DisplayNameFor(model => model.bole_hora_Destino_Nombre)</th>
                                        <th class="text-dark">@Html.DisplayNameFor(model => model.bole_Fecha)</th>
                                        <th class="text-dark">@Html.DisplayNameFor(model => model.comp_Nombre)</th>

                                    </tr>
                                </thead>
                                <tbody class="text-dark">
                                    @foreach (var item in Model)
                                    {
                                        <tr role="row" data-id="@item.bole_ID" class="text-dark align-text-bottom">
                                            <td>@Html.DisplayFor(modelItem => item.bole_ID)</td>
                                            <td>@Html.DisplayFor(modelItem => item.bole_clie_Nombre_Completo)</td>
                                            <td>@Html.DisplayFor(modelItem => item.bole_hora_Origen_Nombre)</td>
                                            <td>@Html.DisplayFor(modelItem => item.bole_hora_Destino_Nombre)</td>
                                            <td>@Html.DisplayFor(modelItem => item.bole_Fecha)</td>
                                            <td>@Html.DisplayFor(modelItem => item.comp_Nombre)</td>

                                        </tr>
                                    }
                                </tbody>
                                <tfoot class="bg-teal-400">
                                    <tr class="text-dark">
                                        <th class="text-dark">@Html.DisplayNameFor(model => model.bole_ID)</th>
                                        <th class="text-dark">@Html.DisplayNameFor(model => model.bole_clie_Nombre_Completo)</th>
                                        <th class="text-dark">@Html.DisplayNameFor(model => model.bole_hora_Origen_Nombre)</th>
                                        <th class="text-dark">@Html.DisplayNameFor(model => model.bole_hora_Destino_Nombre)</th>
                                        <th class="text-dark">@Html.DisplayNameFor(model => model.bole_Fecha)</th>
                                        <th class="text-dark">@Html.DisplayNameFor(model => model.comp_Nombre)</th>

                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<img src="./" />
<script>
    if (!window.jsPDF) window.jsPDF = window.jspdf.jsPDF
</script>

@*<script src="~/examples/mitubachi-normal.js"></script>
    <script src="~/examples/libs/faker.min.js"></script>
    <script src="~/dist/jspdf.plugin.autotable.js"></script>*@
<iframe id="pdf-preview" width="700px" height="600px"></iframe>

<script>
    //boton exporta
    $(document).ready(function () {
        // Obtener la tabla por su id
        var tabla = $('#DataTable');

        // Obtener los encabezados de la tabla
        var encabezados = tabla.find('th').map(function (index, element) {
            // Obtener solo las primeras 5 columnas
            if (index <= 5) {
                return $(element).text();
            }
        }).get();

        // Obtener los datos de la tabla
        var datos = tabla.find('tbody tr').map(function () {
            var fila = $(this);
            var celdas = fila.find('td').map(function () {
                return $(this).text();
            }).get();
            return [celdas]; // Se envuelve el arreglo de celdas dentro de otro arreglo
        }).get();

        // Crear el objeto de configuración para autoTable
        var config = {
            head: [encabezados],
            body: datos,
            startY: 70,
            didDrawPage: function (data) {
                // Establecer el margen superior de la tabla en cada página
                data.settings.margin.top = 70;

                ///reyeno
                var img = new Image();
                img.src = "/img/EncabezadoReporteBoletosRecorte.png";
                data.doc.addImage(img, 'PNG', null, 0, 220, 60);


                // Establecer la posición de inicio de la tabla en cada página
                data.startY = data.settings.margin.top + 50; // Altura de la imagen
            },
            didParseCell: function (data) {
                // Agregar la imagen en la primera celda de la primera fila
                if (data.section === 'head' && data.row.index === 0 && data.cell.index === 0) {
                    var img = new Image();
                    img.src = '/img/EncabezadoReporteBoletosRecorte.png';
                    var imgData = getBase64Image(img);
                    data.cell.styles.fillColor = '#FFFFFF';
                    data.cell.styles.textColor = '#000000';
                    data.cell.styles.fontSize = 15;
                    data.cell.styles.cellPadding = 10;
                    data.cell.styles.overflow = 'linebreak';
                    data.cell.contentWidth = 190;
                    data.cell.text = '';
                    data.cell.raw = imgData;
                }
            }
        };

        // Crear el PDF con autoTable
        var pdf = new jsPDF();
        pdf.autoTable(config);

        // Obtener la URL del objeto Blob y establecerla como src del iframe
        var pdfBlob = pdf.output('blob');
        var pdfUrl = URL.createObjectURL(pdfBlob);
        $('#pdf-preview').attr('src', pdfUrl);

        $("#btn_Exportar").click(function () {
            pdf.save("Reporte de Boletos");

        })
    });

    // Función para convertir la imagen en base64
    function getBase64Image(img) {
        var canvas = document.createElement("canvas");
        canvas.width = img.width;
        canvas.height = img.height;
        var ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0);
        var dataURL = canvas.toDataURL("image/jpeg");
        return dataURL.replace(/^data:image\/(png|jpg);base64,/, "");
    }


</script>
